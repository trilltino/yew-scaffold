import { 
  Client as ContractClient, 
  Spec as ContractSpec,
  AssembledTransaction 
} from '@stellar/stellar-sdk/contract';

export const networks = {
  testnet: {
    networkPassphrase: "Test SDF Network ; September 2015",
    contractId: "CAJHY2JSOGE7JMTBFZ4H3QL5GK2ZGPJBGII7W5GZ5LT4HGTAVP5IVDYE",
  }
};

// Define the interface for what methods the contract should have
interface HelloContract {
  hello(params: {to: string}, options?: any): Promise<AssembledTransaction<Array<string>>>;
}

export class Client extends ContractClient implements HelloContract {
  constructor(options: any) {
    super(
      new ContractSpec([
        "AAAAAAAAAAAAAAAFaGVsbG8AAAAAAAABAAAAAAAAAAJ0bwAAAAAAEAAAAAEAAAPqAAAAEA=="
      ]),
      options
    );
    console.log('âœ… Real Stellar client created with options:', options);
  }

  // Override the dynamically generated hello method
  hello(params: {to: string}, options?: any): Promise<AssembledTransaction<Array<string>>> {
    console.log('ðŸš€ Calling real Stellar contract with params:', params);
    
    // Use type assertion to access the dynamically generated method
    const baseMethod = (this as any).hello;
    
    if (!baseMethod) {
      throw new Error('Hello method not generated by ContractSpec');
    }
    
    return baseMethod.call(this, params, options).then((result: any) => {
      console.log('âœ… Full contract response:', result);
      console.log('âœ… Response type:', typeof result);
      if (result && typeof result === 'object') {
        console.log('âœ… Response keys:', Object.keys(result));
      }
      return result;
    });
  }
}